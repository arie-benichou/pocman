
package fr.designpattern.pocman.view;

import static org.junit.Assert.assertTrue;

import org.junit.Test;

import fr.designpattern.pocman.game.Maze;

public class MazeAsGraphViewTest { // TODO à compléter

    private final static Maze MAZE = new Maze("" +
            "┃⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛┃" +
            "┃∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙┃" +
            "┃⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛∙┃∙⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛┃" +
            "┃∙∙∙∙∙∙∙∙∙∙∙∙┃∙∙∙∙∙∙∙∙∙∙∙∙┃" +
            "┃⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛┃" +
            "┃∙∙∙∙∙∙∙∙∙∙∙∙┃∙∙∙∙∙∙∙∙∙∙∙∙┃" +
            "┃⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛∙┃∙⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛┃" +
            "┃∙∙∙∙∙∙∙∙∙∙∙∙┃∙∙∙∙∙∙∙∙∙∙∙∙┃" +
            "┃⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛┃" +
            "┃∙∙∙∙∙∙∙∙∙∙∙∙┃∙∙∙∙∙∙∙∙∙∙∙∙┃" +
            "┃⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛∙┃∙⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛┃" +
            "┃∙∙∙∙∙∙∙∙∙∙∙∙┃∙∙∙∙∙∙∙∙∙∙∙∙┃" +
            "┃⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛┃" +
            "┃∙∙∙∙∙∙∙∙∙∙∙∙┃∙∙∙∙∙∙∙∙∙∙∙∙┃" +
            "┃⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛∙┃∙⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛┃" +
            "┃∙∙∙∙∙∙∙∙∙∙∙∙┃∙∙∙∙∙∙∙∙∙∙∙∙┃" +
            "┃⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛∙⬛⬛⬛⬛⬛┃" +
            "┃∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙┃" +
            "┃⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛┃");

    @Test(expected = IllegalArgumentException.class)
    public void testRenderWithNullReference() {
        new MazeAsGraphView().render(null);
    }

    @Test
    public void testRender() {
        final String expected = "" +
                "                           " + "\n" +
                " 1∙∙∙∙3∙∙∙∙∙3∙3∙∙∙∙∙3∙∙∙∙1 " + "\n" +
                "      ∙     ∙ ∙     ∙      " + "\n" +
                " 1∙∙∙∙4∙∙∙∙∙2 2∙∙∙∙∙4∙∙∙∙1 " + "\n" +
                "      ∙             ∙      " + "\n" +
                " 1∙∙∙∙4∙∙∙∙∙2 2∙∙∙∙∙4∙∙∙∙1 " + "\n" +
                "      ∙     ∙ ∙     ∙      " + "\n" +
                " 1∙∙∙∙4∙∙∙∙∙2 2∙∙∙∙∙4∙∙∙∙1 " + "\n" +
                "      ∙             ∙      " + "\n" +
                " 1∙∙∙∙4∙∙∙∙∙2 2∙∙∙∙∙4∙∙∙∙1 " + "\n" +
                "      ∙     ∙ ∙     ∙      " + "\n" +
                " 1∙∙∙∙4∙∙∙∙∙2 2∙∙∙∙∙4∙∙∙∙1 " + "\n" +
                "      ∙             ∙      " + "\n" +
                " 1∙∙∙∙4∙∙∙∙∙2 2∙∙∙∙∙4∙∙∙∙1 " + "\n" +
                "      ∙     ∙ ∙     ∙      " + "\n" +
                " 1∙∙∙∙4∙∙∙∙∙2 2∙∙∙∙∙4∙∙∙∙1 " + "\n" +
                "      ∙             ∙      " + "\n" +
                " 1∙∙∙∙3∙∙∙∙∙∙∙∙∙∙∙∙∙3∙∙∙∙1 " + "\n" +
                "                           " + "\n";
        ;
        assertTrue(expected.equals(new MazeAsGraphView().render(MAZE)));
    }

}